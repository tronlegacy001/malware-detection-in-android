import os
import pickle
import numpy as np
import pandas as pd
from keras.models import load_model
from keras.models import model_from_json
from androguard.core.bytecodes.apk import APK
#from genetic_algorithm import GeneticSelector
from androguard.core.bytecodes import apk
from androguard.misc import AnalyzeAPK


#class CustomUnpickler(pickle.Unpickler):
#   """ https://stackoverflow.com/questions/27732354/unable-to-load-files-using-pickle-and-multiple-modules"""
#
#    def find_class(self, module, name):
#        try:
#            return super().find_class(__name__, name)
#        except AttributeError:
#            return super().find_class(module, name)


#sel = CustomUnpickler(open('./static/models/ga.pkl', 'rb')).load()

permissions = []
with open('./static/permissions.txt', 'r') as f:
    content = f.readlines()
    for line in content:
        cur_perm = line[2:-2]
        permissions.append(cur_perm)


def classify(file):
    print("starting work")
    vector = {}
    result = 0
    apkf = apk.APK(file)
    for perm in permissions:
        vector[perm] = 0 
    for perm in apkf.permissions:
        if perm in vector:
            vector[perm]= 1
        
    dx = AnalyzeAPK(file)[2]
    for method in dx.get_methods():
        for _, call, _ in method.get_xref_to():
            if str(call.name) in vector:
                vector[str(call.name)]+=1
    #name, sdk, size = 'unknown', 'unknown', 'unknown'
    #app = APK(file)
    #perm = app.get_permissions()
    #name, sdk, size = meta_fetch(file)
    #for p in permissions:
     #   if p in perm:
      #      vector[p] = 1
     #   else:
       #     vector[p] = 0
    data=[]
    for perm in permissions:
        data.append(vector[perm])
    data=pd.DataFrame(data).transpose()
    json_file=open('static/models/model2.json','r')
    loaded_model_json = json_file.read()
    json_file.close()
    loaded_model = model_from_json(loaded_model_json)
	#load weights into new model
    loaded_model.load_weights("static/models/model3.h5")
    loaded_model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
    #DNN = load_model('static/models/model3.h5')
    #print(data)
    result = loaded_model.predict(data)
    print(result)
    Max=0
    fin=''
    li=['Adware','Ransomware','Scareware','SMSmalware','Benign']
    for i in range (5):
        if(result[0][i]>=Max):
            Max=result[0][i]
            fin=li[i]
    print(fin)
    return fin


